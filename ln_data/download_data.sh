#!/bin/bash

version="0.1"

# This is an optional arguments-only example of Argbash potential
#
# ARG_OPTIONAL_SINGLE([path],[p],[path onto which files are to be downloaded],[data])
# ARG_VERSION([echo test v$version])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.5.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
    local _ret=$2
    test -n "$_ret" || _ret=1
    test "$_PRINT_HELP" = yes && print_help >&2
    echo "$1" >&2
    exit ${_ret}
}

begins_with_short_option()
{
    local first_option all_short_options
    all_short_options='pvh'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_path="referit_data"

print_help ()
{
    printf "%s\n" "download ReferIt data script"
    printf 'Usage: %s [-p|--path <arg>] [-v|--version] [-h|--help]\n' "$0"
    printf "\t%s\n" "-p,--path: path onto which files are to be downloaded (default: '"referit_data"')"
    printf "\t%s\n" "-v,--version: Prints version"
    printf "\t%s\n" "-h,--help: Prints help"
}

parse_commandline ()
{
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -p|--path)
                test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
                _arg_path="$2"
                shift
                ;;
            --path=*)
                _arg_path="${_key##--path=}"
                ;;
            -p*)
                _arg_path="${_key##-p}"
                ;;
            -v|--version)
                echo test v$version
                exit 0
                ;;
            -v*)
                echo test v$version
                exit 0
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            *)
                _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
                ;;
        esac
        shift
    done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to download a file with available downloaders
download_file() {
    local url=$1
    local output_file=${2:-$(basename "$url")}
    
    echo "Downloading $output_file..."
    
    if command_exists aria2c; then
        aria2c -x 8 "$url" -o "$output_file"
    elif command_exists wget; then
        wget -O "$output_file" "$url"
    elif command_exists curl; then
        curl -L -o "$output_file" "$url"
    else
        echo "Error: No download tool found. Please install aria2c, wget, or curl."
        exit 1
    fi
    
    if [ $? -ne 0 ]; then
        echo "Error: Failed to download $url"
        return 1
    fi
    
    return 0
}

echo "Save data to: $_arg_path"

# Check for extraction tools
if ! command_exists tar || ! command_exists unzip; then
    echo "Error: This script requires 'tar' and 'unzip' to extract the downloaded files."
    echo "Please install these tools before running the script."
    exit 1
fi

# Updated URLs for datasets with reliable alternatives
REFERIT_SPLITS_URL="https://github.com/lichengunc/refer/raw/master/data/referit/splits.zip"
# Updated ReferIt Data URL - using GitHub alternative
REFERIT_DATA_URL="https://github.com/ChenyunWu/PhraseCutDataset/releases/download/data/referitdata.tar.gz"
COCO_DATA_URL="http://images.cocodataset.org/zips/train2014.zip"

REFCOCO_URL="https://github.com/lichengunc/refer/releases/download/v1/refcoco.zip"
REFCOCO_PLUS_URL="https://github.com/lichengunc/refer/releases/download/v1/refcoco+.zip"
REFCOCOG_URL="https://github.com/lichengunc/refer/releases/download/v1/refcocog.zip"

REFERIT_FILE="referitdata.tar.gz"
SPLIT_FILE="splits.zip"  # Changed from referit_splits.tar.bz2 to match new URL
COCO_FILE="train2014.zip"

if [ ! -d $_arg_path ]; then
    mkdir $_arg_path
fi
cd $_arg_path

mkdir -p referit
cd referit

printf "Downloading ReferIt dataset (This may take a while...)\n"
download_file "$REFERIT_DATA_URL" "$REFERIT_FILE" || exit 1

printf "Uncompressing data...\n"
tar -xzvf "$REFERIT_FILE"
rm "$REFERIT_FILE"

mkdir -p splits
cd splits

printf "Downloading ReferIt Splits...\n"
download_file "$REFERIT_SPLITS_URL" "$SPLIT_FILE" || exit 1

unzip "$SPLIT_FILE"
rm "$SPLIT_FILE"

cd ../..

mkdir -p other/images/mscoco/images
cd other/images/mscoco/images

printf "Downloading MS COCO 2014 train images (This may take a while...)\n"
download_file "$COCO_DATA_URL" "$COCO_FILE" || exit 1

unzip "$COCO_FILE"
rm "$COCO_FILE"

cd ../../..
printf "Downloading refcoco, refcocog and refcoco+ splits...\n"
download_file "$REFCOCO_URL" "refcoco.zip" || exit 1
download_file "$REFCOCO_PLUS_URL" "refcoco+.zip" || exit 1
download_file "$REFCOCOG_URL" "refcocog.zip" || exit 1

unzip "*.zip"
rm *.zip